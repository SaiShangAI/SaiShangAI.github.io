<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://saishangai.github.io</id>
    <title>Sai&apos;s Blog</title>
    <updated>2020-04-26T09:56:36.251Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://saishangai.github.io"/>
    <link rel="self" href="https://saishangai.github.io/atom.xml"/>
    <subtitle>Hello, Welcome to Sai&apos;s Page! The webpage is developing now. Please be paticient.</subtitle>
    <logo>https://saishangai.github.io/images/avatar.png</logo>
    <icon>https://saishangai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Sai&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[How to connect Aduino and Ultrasonic Sensor (HC-SR04)]]></title>
        <id>https://saishangai.github.io/post/how-to-connect-aduino-and-ultrasonic-sensor-hc-sr04</id>
        <link href="https://saishangai.github.io/post/how-to-connect-aduino-and-ultrasonic-sensor-hc-sr04">
        </link>
        <updated>2020-02-17T16:14:13.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://saishangai.github.io/post-images/1582132522887.png" alt="" loading="lazy"><br>
The following table shows the connections you need to make:</p>
<table>
<thead>
<tr>
<th>Ultrasonic Sensor HC-SR04</th>
<th style="text-align:center">Arduino</th>
</tr>
</thead>
<tbody>
<tr>
<td>VCC</td>
<td style="text-align:center">5V</td>
</tr>
<tr>
<td>Trig</td>
<td style="text-align:center">Pin 11</td>
</tr>
<tr>
<td>Echo</td>
<td style="text-align:center">Pin 12</td>
</tr>
<tr>
<td>GND</td>
<td style="text-align:center">GND</td>
</tr>
</tbody>
</table>
<h2 id="code">Code:</h2>
<p>（Upload the following code to Arduino IDE）</p>
<ol>
<li>
<p>Create variables for Trig and echo pins, named trigPin and echoPin. the trig pin is connected to digital pin 11, echo pin is connected to digital pin 12.</p>
<pre><code>int trigPin = 11; 
int echoPin = 12;
</code></pre>
</li>
<li>
<p>You also need to create two long variables: duration, cm. The variable duration holds the time between the transmission and reception of the signal.</p>
<pre><code>long duration, cm,
</code></pre>
</li>
<li>
<p>In the setup(), initialize the serial port at a baud rate of 9600, and set the trigger pin as an output and the echo pin as an input.</p>
<pre><code>//Serial Port begin
Serial.begin (9600);
//Define inputs and outputs
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
</code></pre>
</li>
<li>
<p>In the loop(), trigger the sensor by sending a HIGH pulse of 10 microseconds. But, before that, give a short LOW pulse to ensure you’ll get a clean HIGH pulse:</p>
<pre><code>digitalWrite(trigPin, LOW);
delayMicroseconds(5);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
</code></pre>
</li>
<li>
<p>Then, you can read the signal from the sensor – a HIGH pulse whose duration is the time in microseconds from the sending of the signal to the reception of its echo to an object.</p>
<pre><code>duration = pulseIn(echoPin, HIGH);
</code></pre>
</li>
<li>
<p>Finally, you just need to convert the duration to a distance. We can calculate the distance by using the following formula:</p>
<pre><code>distance = (traveltime/2) x speed of sound

The speed of sound is: 343m/s = 0.0343 cm/uS = 1/29.1 cm/uS
</code></pre>
</li>
<li>
<p>We need to divide the traveltime by 2 because we have to take into account that the wave was sent, hit the object, and then returned back to the sensor.</p>
<pre><code>cm = (duration/2) / 29.1;
</code></pre>
<p>The cm variable will save the distance in centimetres.</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Digital Twin（teamwork）]]></title>
        <id>https://saishangai.github.io/post/digital-twin</id>
        <link href="https://saishangai.github.io/post/digital-twin">
        </link>
        <updated>2020-02-11T09:51:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I first heard the concept of &quot;Digital Twin&quot; in my IoT course. A digital twin is a digital replica of a living or non-living physical entity. It builds the connection between digital world and physical world. In the project, we designed a wireless sensor network that provides real-time monitoring of temperature, humidity of a greenhouse. Then, the data collected from sensors is sent through IoT gateway to the 3D greenhouse scene established by Unity through the server. To enhance the user's sensory perception, the user can interact with the 3D scene and use the VR device to understand the environmental information.</p>
<h2 id="system-architecture">System Architecture</h2>
<figure data-type="image" tabindex="1"><img src="https://saishangai.github.io/post-images/gh.png" alt="" loading="lazy"></figure>
<h2 id="implementation">Implementation</h2>
<ul>
<li><strong>The Sensor Node:</strong> Arduino works with different sensors to collect data/ control the switch related to the command.</li>
<li><strong>IoT Gateway:</strong> Raspberry PI is used as a gateway to collect data from Arduino and upload the information to remote server. Download commands from Server and transmits to Arduino.</li>
<li><strong>Server:</strong> Server runs on a tablet computer. It stores data from IoT gateway in database.</li>
<li><strong>User Interface:</strong> Client provides users with a 3D greenhouse scenes to allow them manage and view information.</li>
</ul>
<p>The 3D Scene is as follows:<br>
<img src="https://saishangai.github.io/post-images/g1.png" alt="" loading="lazy"><br>
<img src="https://saishangai.github.io/post-images/g2.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Website for Vacuum Cleaner Shopping]]></title>
        <id>https://saishangai.github.io/post/website-for-vacuum-cleaner-shopping</id>
        <link href="https://saishangai.github.io/post/website-for-vacuum-cleaner-shopping">
        </link>
        <updated>2020-01-31T07:08:05.000Z</updated>
        <summary type="html"><![CDATA[<p>I built a website for selling vacuum cleaner in free time. You can click <a href="https://www.youtube.com/watch?v=9J6t-WS1Tp4">here</a> to see it.</p>
]]></summary>
        <content type="html"><![CDATA[<p>I built a website for selling vacuum cleaner in free time. You can click <a href="https://www.youtube.com/watch?v=9J6t-WS1Tp4">here</a> to see it.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Traschbin Management System Using IoT （teamwork）]]></title>
        <id>https://saishangai.github.io/post/traschbin-management-system</id>
        <link href="https://saishangai.github.io/post/traschbin-management-system">
        </link>
        <updated>2020-01-20T07:29:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="introduce">Introduce</h1>
<p>The system is based on Arduino Nano and ultrasonic sensors to monitor the fullness of the trash cans and to send the collected data to Azure Clould using Rasberry PI with WIFI. The cleaners can know the situation of each trash can at any time through android application. The mobile app get and update the information of each trash can from Azure clould.<br>
<img src="https://saishangai.github.io/post-images/1582131630024.png" alt="" loading="lazy"></p>
<h2 id="material">Material</h2>
<table>
<thead>
<tr>
<th>Hardware</th>
<th style="text-align:center">Softwate</th>
<th style="text-align:right">Programming Language</th>
</tr>
</thead>
<tbody>
<tr>
<td>Arduino</td>
<td style="text-align:center">Arduino IDE</td>
<td style="text-align:right">C</td>
</tr>
<tr>
<td>Ultrasonic Sensor (HC-SR04)</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Rasberry PI</td>
<td style="text-align:center">VNC &amp; Visual Studio Code</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Android Phone</td>
<td style="text-align:center">Android Studio</td>
<td style="text-align:right">Java</td>
</tr>
<tr>
<td>Zigbee Module</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Bread Board</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>A. Arduino Uno</p>
<p>It’s a single-board microcontroller, designed to make the application of interactive objects or environments more accessible. Sense the environment by receiving input from variety of sensors.</p>
</li>
<li>
<p>B. Ultrasonic Sensor</p>
<p>Ultrasonic sensors are used for distance measure using reflection mechanism. As soon as signal is given to the sensor through processing unit, it starts sending waves which reflect back from the waste in garbage bins and received back giving the resultant garbage level.<br>
Here's how it works:</p>
<ol>
<li>The transmitter (trigger pin) sends a signal: a high-frequency sound.</li>
<li>When the signal encounters an object, it will be reflected;</li>
<li>Then the transmitter (echo pin) receives the signal<br>
<img src="https://saishangai.github.io/post-images/1582132034911.png" alt="" loading="lazy"></li>
</ol>
</li>
<li>
<p>C. Rasberry PI</p>
<p>Raspberry Pi is a low cost, credit card sized, computer that performs various applications. Some of its main features include 1GB of RAM, 4 USB Ports, General Purpose Input Output pins, Linux support. These features give programmers a wide range for diverse applications. It is used as gateway in the project.</p>
</li>
<li>
<p>D.Zig bee module</p>
<p>Zig Bee is an IEEE 802.15.4-based specification for a suite of high-level communication protocols used to create personal area networks with small, low-power digital radios, such as for home automation, medical device data collection, and other low-power low-bandwidth needs, designed for small scale projects which need wireless connection.</p>
</li>
</ul>
<h2 id="implementation">Implementation</h2>
<p>The framework of the system can be divided into 4 stages:</p>
<ol>
<li>
<p><strong>The Smart Bin:</strong> sensor node is mounted on the bin that composed the smart bin. Ultrasonic sensors are used for level measurement of garbage in the bin. Arduino sent the measured data to the gateway through Zig Bee communication.</p>
<ul>
<li>connect Arduino and HC-SR04 sensor:<br>
<img src="https://saishangai.github.io/post-images/1582132138509.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p><strong>Gateway:</strong> the status of trash cans is collected to IoT gateway through Zigbee receiver module. Then the gateway sends the data and also stores to a remote Azure database.</p>
</li>
<li>
<p><strong>Cloud Database:</strong> a database created in Azure cloud-platform to store information.</p>
</li>
<li>
<p><strong>User Interface:</strong> a android-based graphic user interface is designed to help user see the fullness of each trash can at any time.<br>
<img src="https://saishangai.github.io/post-images/traschbin.png" alt="" loading="lazy"><br>
<img src="https://saishangai.github.io/post-images/us.png" alt="" loading="lazy"><br>
The introduction of the user interface:</p>
<ol>
<li>Login: it is a login interface. Each cleaner has an account.</li>
<li>Layer Choice: when cleaner successfully logs in to the app, he/she will see the layers in a building they are responsible for.</li>
<li>Plan:  if the cleaner chooses one layer in the second step, it will display a floor plan of the selected layer. There is a star for each room on the floor plan, which allows cleaner to see the status of the trash can.</li>
<li>Trash Height: when the cleaner clicks the star, it will access database to get the current height of the garbage. Then the fullness of the trash bin in the room will be displayed to the cleaner.</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About ME ^_^]]></title>
        <id>https://saishangai.github.io/post/About Me</id>
        <link href="https://saishangai.github.io/post/About Me">
        </link>
        <updated>2020-01-11T11:29:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduce">Introduce</h2>
<figure data-type="image" tabindex="1"><img src="https://saishangai.github.io/post-images/1580158538681.png" alt="" loading="lazy"></figure>
<p>I am Sai Shang. I completed my Bachelor's degree in Computer Science in China. In 2019 I graduated with a degree in M.Sc. Information and Communication Technology at the University of Duisburg-Essen, with a focus in &quot;Embedded Systems Engineering, ISE&quot;.  I likes programming because I can turn my interesting idea into reality through programming code.  I'm familiar with programming like  python, c#, javascript. During the studing time, I have done different pratical project In IoT lab. Like developed  mobile application based on android plateform, applied VR technoly into sesornetwork and so on.</p>
<p>I'm also interested in web development. My master topic is about that.  I developed a web-based application prototype.  In this prototype, I designed and applied different comparative visualization methods (2D Matrix ,2D Bubble Chart and 3D map) to display a lot of  products. Through this project, I gained  how to develop a website include front-end and back end and how to design interactive user interfaces based on user needs.</p>
<h1 id="contact">Contact</h1>
<p>📧 Email: <a href="">saishang521@gmail.com</a><br>
📞 Phone: +49 176 30192 746<br>
📫 Address: 285. Heerstraße, 47053 Duisburg, Deutschland</p>
<h1 id="cv-preview">CV Preview</h1>
<p><a href="https://github.com/SaiShangAI/Documents">DE_Lenbenslauf</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Master Thesis-Development of visualization methods for a comparison-based recommender system]]></title>
        <id>https://saishangai.github.io/post/master-thesis</id>
        <link href="https://saishangai.github.io/post/master-thesis">
        </link>
        <updated>2020-01-09T05:47:41.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://saishangai.github.io/post-images/1580160703877.png" alt="" loading="lazy"></figure>
<h1 id="abstract">Abstract</h1>
<p>Product comparison tools are often used in online retailing, where also recommender systems are very popular. Nonetheless their effects and possible benefits on the decision-making stage during the recommending process have never been studied and no proper research has been conducted about their combination. Besides, although there is a whole research field regarding information visualization, there are open questions regarding the best way to present the product space (to ease the exploration and understanding of the whole set of recommended items) and individual product properties (to individually decide for the best option) when using a comparison tool. To research these questions, a novel concept of a comparison-based recommender system is introduced in this paper. It concentrates on two visualization levels: whole product space and individual items. For the first level, a 2D bubble chart and a 3D map-based visualization are applied to present a set of recommended items. For the second level, two different approaches for single attribute comparison are available: relative differences and absolute values. To assess the validity of the approaches, a prototype for a shopping site was developed and implemented based on the aforementioned comparative visualizations. Finally, a user study was conducted. The results indicate the comparison tools have a positive effect in the RS area.</p>
<h1 id="thesis-approach">Thesis Approach</h1>
<p>Various visualization techniques are now available on the Internet. These comparative visualization methods are used in the fields of medicine, commerce, transportation, etc. to  help people discover differences between objects. The process of discovering discrepancies  involves finding the relationships between objects. To better design the comparison tools  used in the recommender systems, a pre-study of comparative visualization techniques was  conducted. This thesis takes into account the products to be compared, the number of recommendations and the complexity of the items and then devised several visualization methods that be benefificial in comparing products and contributing to the decision-making.</p>
<ol>
<li>
<p>The first one is related to the visual representation of product space. The product space refers to the whole set of recommended items, which can be very large and difficult to explore. For such a scenario, I use a 2D bubble chart and 3D map, which are the best results of pre-study, to provide the users with an overview of all recommendations. In addition, both methods still visually show the basic discrepancies between the items.</p>
<ul>
<li>2D Bubble Chart: When a recommender system recommends a set of items based on a user’s preference, the recommendations are represented by the bubbles with  product images. Products are displayed in a 2D bubble chart. The x and y axes of the bubble chart are the numeric attributes that users want to compare. Each item  on both axes is arranged from small to large according to the value of features. So  the users can not only see the recommended products, but also intuitively know  the difference between the items from their location and distribution. Besides, the  color of bubble represents if a product satisfifies filtering conditions. The size of a  bubble indicates how well each item meets a user’s preferences.<br>
<img src="https://saishangai.github.io/post-images/1580151066684.png" alt="" loading="lazy"></li>
<li>3D Map: It is similar to 2D bubble chart, but the recommended items are displayed on a 3D map. In addition to giving a comparative meaning on the x-axis and y axis, the elevation of the map’s surface is used to indicate how much each recommended item meets the users’ preferences. The color of the surface is changed with the users’ preferences. Furthermore, it supplies interaction with product space through rotate, zoom, drag.<br>
<img src="https://saishangai.github.io/post-images/1580151128999.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>The second part is the visualization of product properties. The items’ attributes are displayed side by side in a dynamic table using two visualization methods: relative difference visualization and absolute value visualization.</p>
<ul>
<li>
<p>Dynamic Table: The so-called dynamic comparison table uses rows to represent item properties, columns to represent products. The users can select some products from product space for comparing and these items will be dynamically added to the table. Besides, interactive functions that assist in comparing are provided, such as sorting items based on a specific attribute, deleting items. As the users’preferences change, the order of the properties will change dynamically. Faced with numerous attributes, some that are important to the users will be displayed in prominent locations.</p>
</li>
<li>
<p>Absolute value visualization: Values are represented side by side by a verticalbar chart in a dynamic table. The height of rectangular bars is proportional to the values. Besides, the color of the bars (from dark to light) is also mapped to the size of the values (small to large).<br>
<img src="https://saishangai.github.io/post-images/1580151528767.png" alt="" loading="lazy"></p>
</li>
<li>
<p>Relative difference visualization: The relative difference represents the percentage increase or decreases of values compared to a baseline. The baseline can be chosen dynamically by users. The percentage is displayed side by side by a vertical positive or negative bar in a dynamic table. In order to highlight the difference between the ratios, the technique of color-coding is also applied to show the rectangular bars.<br>
<img src="https://saishangai.github.io/post-images/1580151534208.png" alt="" loading="lazy"></p>
</li>
</ul>
</li>
</ol>
<h1 id="systems-architecture">System's Architecture</h1>
<p>The web-based application prototype includes a recommender system with a comparison tool. The system recommends items according to user preferences which are collected explicitly from users'  interaction with the features filter. Then the comparison tool displays the set of recommended items using of the previously designed visualizations. The whole system's architecture is below:<br>
<img src="https://saishangai.github.io/post-images/1580151712829.png" alt="" loading="lazy"></p>
<h1 id="used-technologies">Used Technologies</h1>
<p>The server is built using Node.js. It is a runtime environment for JavaScript based on ChromeV8 engine. Node.js uses an event-driven, asynchronous I/O model. It is used to build fast, easy-to-expand web applications easily.</p>
<p>The server is also connected with a database, which is developed using MySQL. MySQL is a relational database management system. Relational databases store data in separate tables instead of place all of the data in a large repository, which increases speed and flexibility. The SQL language used by MySQL is also the most commonly used standardized language for<br>
accessing databases.</p>
<p>Besides, XAMPP is used to manage and deploy databases easily. XAMPP is a powerful integration package includes Apache, MySQL, PHP and PERL. This thesis only uses its MySQL and corresponding management page.</p>
<p>The webpages in the client were created using JQuery, D3.js, HTML,CSS, Bootstrape and Unity.  jQuery is a fast, simple and clear JavaScript framework. It wraps the commonly used JavaScript functions and provides a design pattern that optimizes HTML document manipulation, event handling, animation design, communication and user interaction. D3.js is similar to JQuery, it is a JavaScript library to manupulate web documents. But it’s advantage to draw custom shapes and graphs based on the data.</p>
<p>Unity is a multi-platform (including web platform) game engine. Developers can use it to create such as 3D video games, 3D animations, VR projects and 3D web applications. In this thesis, it is used to create the 3D Map.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://github.com/SaiShangAI/Documents">Presentation</a></li>
<li>[Youtube]</li>
</ul>
]]></content>
    </entry>
</feed>